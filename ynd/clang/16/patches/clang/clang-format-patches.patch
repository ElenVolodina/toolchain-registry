port pg@ patch from https://a.yandex-team.ru/arc/commit/r8458413
(so also need change paths in test /trunk/arcadia/contrib/tests/cpp_style to current compiler)

--- a/lib/Format/ContinuationIndenter.cpp
+++ b/lib/Format/ContinuationIndenter.cpp
@@ -328,9 +328,65 @@ bool ContinuationIndenter::canBreak(const LineState &State) {
   return !CurrentState.NoLineBreak;
 }
 
+static bool possibleClassName(const FormatToken *Current) {
+    if (!Current) {
+        return false;
+    }
+
+    auto N = Current->Next;
+
+    if (!N) {
+        return false;
+    }
+
+    auto L = Current->TokenText[0];
+
+    if (L == 'T') {
+        if (N->isOneOf(tok::l_brace, TT_TemplateOpener)) {
+            return true;
+        }
+    }
+
+    if (L == 'T' || L == 'N') {
+        if (N->TokenText == "::") {
+            return possibleClassName(N->Next);
+        }
+    }
+
+    return false;
+}
+
+static bool shouldContinue(const FormatToken &Current, const LineState &State) {
+  if (Current.isOneOf(tok::l_brace, tok::r_brace)) {
+    return false;
+  }
+
+  // field initializer
+  if (Current.is(TT_DesignatedInitializerPeriod)) {
+    return false;
+  }
+
+  if (possibleClassName(&Current)) {
+    return false;
+  }
+
+  for (const auto& s : State.Stack) {
+    if (auto t = s.Tok; t && t->TokenText == "(") {
+      return true;
+    }
+  }
+
+  return false;
+}
+
 bool ContinuationIndenter::mustBreak(const LineState &State) {
   const FormatToken &Current = *State.NextToken;
   const FormatToken &Previous = *Current.Previous;
+  if (Previous.TokenText == ",") {
+    if (shouldContinue(Current, State)) {
+      return false;
+    }
+  }
   const auto &CurrentState = State.Stack.back();
   if (Style.BraceWrapping.BeforeLambdaBody && Current.CanBreakBefore &&
       Current.is(TT_LambdaLBrace) && Previous.isNot(TT_LineComment)) {
--- a/lib/Format/NamespaceEndCommentsFixer.cpp
+++ b/lib/Format/NamespaceEndCommentsFixer.cpp
@@ -64,6 +64,7 @@ std::string computeName(const FormatToken *NamespaceTok) {
 std::string computeEndCommentText(StringRef NamespaceName, bool AddNewline,
                                   const FormatToken *NamespaceTok,
                                   unsigned SpacesToAdd) {
+  return "";
   std::string text = "//";
   text.append(SpacesToAdd, ' ');
   text += NamespaceTok->TokenText;
--- a/lib/Format/TokenAnnotator.cpp
+++ b/lib/Format/TokenAnnotator.cpp
@@ -1830,6 +1830,26 @@ private:
     return false;
   }
 
+  bool possibleTrailingArrowStart(FormatToken* Current) {
+    if (!Current) {
+      return false;
+    }
+
+    if (Current->isOneOf(tok::r_paren, tok::kw_const, tok::kw_volatile, tok::kw_mutable, tok::kw_noexcept)) {
+      return true;
+    }
+
+    if (Current->TokenText == "&") {
+      return true;
+    }
+
+    if (Current->TokenText == "&&") {
+      return true;
+    }
+
+    return false;
+  }
+
   void determineTokenType(FormatToken &Current) {
     if (!Current.is(TT_Unknown)) {
       // The token type is already known.
@@ -1882,6 +1882,7 @@ private:
       Current.setType(TT_LambdaArrow);
     } else if (Current.is(tok::arrow) && AutoFound && Line.MustBeDeclaration &&
                Current.NestingLevel == 0 &&
+               possibleTrailingArrowStart(Current.Previous) &&
                !Current.Previous->isOneOf(tok::kw_operator, tok::identifier)) {
       // not auto operator->() -> xxx;
       Current.setType(TT_TrailingReturnArrow);
@@ -3378,6 +3378,14 @@ bool TokenAnnotator::spaceRequiredBeforeParens(const FormatToken &Right) const {
 bool TokenAnnotator::spaceRequiredBetween(const AnnotatedLine &Line,
                                           const FormatToken &Left,
                                           const FormatToken &Right) const {
+  if (Left.TokenText.str() == "with_lock") {
+    auto p = Left.Previous;
+
+    if (!p || p->TokenText != "define") {
+      return true;
+    }
+  }
+
   if (Left.is(tok::kw_return) &&
       !Right.isOneOf(tok::semi, tok::r_paren, tok::hashhash)) {
     return true;
@@ -3818,6 +3818,20 @@ bool TokenAnnotator::spaceRequiredBefore(const AnnotatedLine &Line,
                                          const FormatToken &Right) {
   const FormatToken &Left = *Right.Previous;
 
+  if (Right.is(tok::colon)) {
+    auto n = Right.Next;
+
+    if (n && n->isOneOf(tok::kw_public, tok::kw_private, tok::kw_protected)) {
+      return false;
+    }
+
+    auto p = Left.Previous;
+
+    if (p && p->isOneOf(tok::kw_class, tok::kw_struct, tok::kw_enum)) {
+      return false;
+    }
+  }
+
   // If the token is finalized don't touch it (as it could be in a
   // clang-format-off section).
   if (Left.Finalized)
@@ -4359,12 +4359,51 @@ static const FormatToken *getFirstNonComment(const AnnotatedLine &Line) {
   return Next;
 }
 
+template <class T>
+static const T* CalcPrev(const T* v, size_t n) noexcept {
+    while (v && n) {
+        v = v->Previous;
+        n -= 1;
+    }
+
+    return v;
+}
+
 bool TokenAnnotator::mustBreakBefore(const AnnotatedLine &Line,
                                      const FormatToken &Right) const {
   const FormatToken &Left = *Right.Previous;
+
+  //llvm::errs() << Left.TokenText << " " << Right.TokenText << " " << Right.LastNewlineOffset << "\n";
+
   if (Right.NewlinesBefore > 1 && Style.MaxEmptyLinesToKeep > 0)
     return true;
 
+  if (Left.TokenText == "{" && Right.is(tok::identifier)) {
+    if (auto m = CalcPrev(&Left, 2); m && m->TokenText == "enum") {
+      return true;
+    }
+
+    if (auto m = CalcPrev(&Left, 4); m && m->TokenText == "enum") {
+      return true;
+    }
+  }
+
+  if (Left.TokenText == "}" && Right.TokenText == "{") {
+    return true;
+  }
+
+  if (Left.TokenText == ")" && Right.TokenText == "{") {
+    if (Right.LastNewlineOffset == 1) {
+      return true;
+    }
+
+    auto m = CalcPrev(Left.MatchingParen, 2);
+
+    if (m && m->isOneOf(TT_CtorInitializerComma, TT_CtorInitializerColon)) {
+      return true;
+    }
+  }
+
   if (Style.isCSharp()) {
     if (Left.is(TT_FatArrow) && Right.is(tok::l_brace) &&
         Style.BraceWrapping.AfterFunction)
@@ -4767,7 +4767,7 @@ bool TokenAnnotator::mustBreakBefore(const AnnotatedLine &Line,
     // Multiple lambdas in the same function call force line breaks.
     if (Left.BlockParameterCount > 1)
       return true;
-
+#if 0
     // A lambda followed by another arg forces a line break.
     if (!Left.Role)
       return false;
@@ -4779,6 +4779,7 @@ bool TokenAnnotator::mustBreakBefore(const AnnotatedLine &Line,
       return false;
     if (!Next->isOneOf(TT_LambdaLSquare, tok::l_brace, tok::caret))
       return true;
+#endif
   }
 
   return false;
@@ -4788,6 +4788,9 @@ bool TokenAnnotator::mustBreakBefore(const AnnotatedLine &Line,
 bool TokenAnnotator::canBreakBefore(const AnnotatedLine &Line,
                                     const FormatToken &Right) const {
   const FormatToken &Left = *Right.Previous;
+  if (Left.is(TT_AttributeMacro)) {
+    return false;
+  }
   // Language-specific stuff.
   if (Style.isCSharp()) {
     if (Left.isOneOf(TT_CSharpNamedArgumentColon, TT_AttributeColon) ||
--- a/lib/Format/UnwrappedLineParser.cpp
+++ b/lib/Format/UnwrappedLineParser.cpp
@@ -2036,6 +2036,7 @@ void UnwrappedLineParser::parseStructuralElement(
       }
 
       // See if the following token should start a new unwrapped line.
+      auto isAttr = FormatTok->is(TT_AttributeMacro);
       StringRef Text = FormatTok->TokenText;
 
       FormatToken *PreviousToken = FormatTok;
@@ -1711,7 +1712,7 @@ void UnwrappedLineParser::parseStructuralElement(
                 : CommentsBeforeNextToken.front()->NewlinesBefore > 0;
 
         if (FollowedByNewline && (Text.size() >= 5 || FunctionLike) &&
-            tokenCanStartNewLine(*FormatTok) && Text == Text.upper()) {
+            tokenCanStartNewLine(*FormatTok) && Text == Text.upper() && !isAttr) {
           if (PreviousToken->isNot(TT_UntouchableMacroFunc))
             PreviousToken->setFinalizedType(TT_FunctionLikeOrFreestandingMacro);
           addUnwrappedLine();
