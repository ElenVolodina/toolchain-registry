--- a/bindings/python/clang/cindex.py
+++ b/bindings/python/clang/cindex.py
@@ -2811,6 +2811,12 @@ class TranslationUnit(ClangObject):
         if index is None:
             index = Index.create()
 
+        path_to_clang_executable = conf.get_path_to_clang_executable()
+        parse = conf.lib.clang_parseTranslationUnit2
+        if path_to_clang_executable:
+            args.insert(0, path_to_clang_executable)
+            parse = conf.lib.clang_parseTranslationUnit2FullArgv
+
         args_array = None
         if len(args) > 0:
             args_array = (c_char_p * len(args))(*[b(x) for x in args])
@@ -2826,14 +2832,16 @@ class TranslationUnit(ClangObject):
                 unsaved_array[i].contents = contents
                 unsaved_array[i].length = len(contents)
 
-        ptr = conf.lib.clang_parseTranslationUnit(index,
-                                    fspath(filename) if filename is not None else None,
-                                    args_array,
-                                    len(args), unsaved_array,
-                                    len(unsaved_files), options)
+        ptr = c_object_p()
+        ret = parse(index,
+                    fspath(filename) if filename is not None else None,
+                    args_array,
+                    len(args), unsaved_array,
+                    len(unsaved_files), options,
+                    byref(ptr))
 
-        if not ptr:
-            raise TranslationUnitLoadError("Error parsing translation unit.")
+        if ret:
+            raise TranslationUnitLoadError("Error parsing translation unit (code %d)." % ret)
 
         return cls(ptr, index=index)
 
@@ -3942,9 +3950,13 @@ functionList = [
    [Type],
    bool),
 
-  ("clang_parseTranslationUnit",
-   [Index, c_interop_string, c_void_p, c_int, c_void_p, c_int, c_int],
-   c_object_p),
+  ("clang_parseTranslationUnit2",
+   [Index, c_interop_string, c_void_p, c_int, c_void_p, c_int, c_int, c_void_p],
+   c_int),
+
+  ("clang_parseTranslationUnit2FullArgv",
+   [Index, c_interop_string, c_void_p, c_int, c_void_p, c_int, c_int, c_void_p],
+   c_int),
 
   ("clang_reparseTranslationUnit",
    [TranslationUnit, c_int, c_void_p, c_int],
@@ -4097,6 +4109,7 @@ def register_functions(lib, ignore_errors):
 class Config(object):
     library_path = None
     library_file = None
+    path_to_clang_executable = None
     compatibility_check = True
     loaded = False
 
@@ -4118,6 +4131,20 @@ class Config(object):
 
         Config.library_file = fspath(filename)
 
+    @staticmethod
+    def set_path_to_clang_executable(filename):
+        """ Set path to clang compiler executable
+
+        Examples:
+            /some_clang_root/bin/clang,
+            /some_clang_root/bin/clang++
+        """
+        if Config.loaded:
+            raise Exception("library file must be set before before using " \
+                            "any other functionalities in libclang.")
+
+        Config.path_to_clang_executable = fspath(filename)
+
     @staticmethod
     def set_compatibility_check(check_status):
         """ Perform compatibility check when loading libclang
@@ -4168,7 +4195,15 @@ class Config(object):
 
         return file
 
+    def get_path_to_clang_executable(self):
+        return Config.path_to_clang_executable
+
     def get_cindex_library(self):
+        # if not Config.library_path and not Config.library_file:
+        #     from library.python.ctypes import StaticLibrary
+        #     from .syms import syms
+        #     return StaticLibrary('clang', syms)
+
         try:
             library = cdll.LoadLibrary(self.get_filename())
         except OSError as e:
