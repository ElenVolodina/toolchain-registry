--- a/lib/Tooling/Tooling.cpp	(index)
+++ b/lib/Tooling/Tooling.cpp	(working tree)
@@ -264,7 +264,9 @@ void addTargetAndModeForProgramName(std::vector<std::string> &CommandLine,
   bool ShouldAddTarget = TargetMode.TargetIsValid;
   bool ShouldAddMode = TargetMode.DriverMode != nullptr;
   // Skip CommandLine[0].
-  for (auto Token = ++CommandLine.begin(); Token != CommandLine.end();
+  auto CommandLine1 = CommandLine.begin();
+  ++CommandLine1;
+  for (auto Token = CommandLine1; Token != CommandLine.end();
        ++Token) {
     StringRef TokenRef(*Token);
     ShouldAddTarget = ShouldAddTarget && !TokenRef.startswith(TargetOPT) &&
@@ -272,10 +274,11 @@ void addTargetAndModeForProgramName(std::vector<std::string> &CommandLine,
     ShouldAddMode = ShouldAddMode && !TokenRef.startswith(DriverModeOPT);
   }
   if (ShouldAddMode) {
-    CommandLine.insert(++CommandLine.begin(), TargetMode.DriverMode);
+    CommandLine.insert(CommandLine1, TargetMode.DriverMode);
+
   }
   if (ShouldAddTarget) {
-    CommandLine.insert(++CommandLine.begin(),
+    CommandLine.insert(CommandLine1,
                        TargetOPT + TargetMode.TargetPrefix);
   }
 }
--- a/utils/TableGen/ClangDiagnosticsEmitter.cpp	(index)
+++ b/utils/TableGen/ClangDiagnosticsEmitter.cpp	(working tree)
@@ -959,7 +959,7 @@ public:
         Result += '|';
       }
       if (!P->Options.empty())
-        Result.erase(--Result.end());
+        Result.pop_back();
       Result += '}';
     }
     addInt(mapIndex(P->Index));
@@ -975,7 +975,7 @@ public:
       Result += "|";
     }
     if (!P->Options.empty())
-      Result.erase(--Result.end());
+      Result.pop_back();
     Result += '}';
     addInt(mapIndex(P->Index));
   }
--- a/utils/TableGen/RISCVVEmitter.cpp
+++ b/utils/TableGen/RISCVVEmitter.cpp
@@ -287,6 +287,7 @@ unsigned SemaSignatureTable::getIndex(ArrayRef<PrototypeDescriptor> Signature) {
   if (Signature.size() < SignatureTable.size()) {
     size_t Bound = SignatureTable.size() - Signature.size() + 1;
     for (size_t Index = 0; Index < Bound; ++Index) {
+      using namespace std;
       if (equal(Signature.begin(), Signature.end(),
                 SignatureTable.begin() + Index))
         return Index;
